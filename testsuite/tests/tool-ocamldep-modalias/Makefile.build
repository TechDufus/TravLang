# Makefile using -no-alias-deps only for lib.ml/mli

# Note: not using pattern rules here is intended.
# This is to be as portable as possible since this Makefile
# will not necessarily be ran by GNU make
# The same holds for $< and $@

.NOTPARALLEL:

SOURCES = A.ml B.ml C.ml D.ml
OBJECTS = lib.cmo $(SOURCES:%.ml=Lib%.cmo)
NOBJECTS = $(OBJECTS:%.cmo=%.cmx)

byte: main.byt
opt: clean main.opt

main.byt: lib.cma main.cmo
	$(travlangC) lib.cma main.cmo -o $@

lib.ml: lib_impl.ml
	cp lib_impl.ml lib.ml

lib.cma: $(OBJECTS)
	$(travlangC) -a -o $@ $(OBJECTS)

lib.cmi: lib.mli
	$(travlangC) -c -no-alias-deps -w -49 lib.mli

lib.cmo: lib.ml
	$(travlangC) -c -no-alias-deps -w -49 lib.ml

LibA.cmo: A.ml
	$(travlangC) -c -open Lib -o LibA.cmo A.ml

LibB.cmo: B.ml
	$(travlangC) -c -open Lib -o LibB.cmo B.ml

LibC.cmo: C.ml
	$(travlangC) -c -open Lib -o LibC.cmo C.ml

LibD.cmo: D.ml
	$(travlangC) -c -open Lib -o LibD.cmo D.ml

main.opt: lib.cmxa main.cmx
	$(travlangOPT) lib.cmxa main.cmx -o $@

lib.cmxa: $(NOBJECTS)
	$(travlangOPT) -a -o $@ $(NOBJECTS)

lib.cmx: lib.ml
	$(travlangOPT) -c -no-alias-deps -w -49 $<

LibA.cmx: A.ml
	$(travlangOPT) -c -open Lib -o LibA.cmx A.ml

LibB.cmx: B.ml
	$(travlangOPT) -c -open Lib -o LibB.cmx B.ml

LibC.cmx: C.ml
	$(travlangOPT) -c -open Lib -o LibC.cmx C.ml

LibD.cmx: D.ml
	$(travlangOPT) -c -open Lib -o LibD.cmx D.ml

include depend.mk

.PHONY: clean
clean:
	rm -f *.cm* lib.ml

%.cmo: %.ml
	$(travlangC) -c $<

%.cmx: %.ml
	$(travlangOPT) -c $<
